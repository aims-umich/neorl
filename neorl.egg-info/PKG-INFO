Metadata-Version: 2.1
Name: neorl
Version: 1.7.7b0
Summary: NeuroEvolution Optimisation with Reinforcement Learning
Home-page: https://github.com/mradaideh/neorl
Author: Majdi I. Radaideh
Author-email: radaideh@mit.edu
License: MIT
Description: 
        # NEORL
        
        NEORL (**N**euro**E**volution **O**ptimization with **R**einforcement **L**earning) is a set of implementations of hybrid algorithms combining neural networks and evolutionary computation based on a wide range of machine learning and evolutionary intelligence architectures. NEORL aims to solve large-scale optimization problems relevant to operation & optimization research, engineering, business, and other disciplines. 
        
        NEORL can be used for multidisciplinary applications for research, industrial, academic, and/or teaching purposes. NEORL can be used as a standalone platform or an additional benchmarking tool to supplement or validate other optimization packages. Our objective when we built NEORL is to give the user a simple and easy-to-use framework with an access to a wide range of algorithms, covering both standalone and hybrid algorithms in evolutionary, swarm, supervised learning, deep learning, and reinforcement learning. We hope NEORL will allow beginners to enjoy more advanced optimization and algorithms, without being involved in too many theoretical/implementation details, and give experts an opportunity to solve large-scale optimization problems.
        ## Copyright
        
        This repository and its content are copyright of [Exelon Corporation](https://www.exeloncorp.com/) Â© in collaboration with [MIT](https://web.mit.edu/nse/) Nuclear Science and Engineering 2021. All rights reserved.
        
        You can read the first successful application of NEORL for nuclear fuel optimisation in this [News Article](https://news.mit.edu/2020/want-cheaper-nuclear-energy-turn-design-process-game-1217).
        
        ## Links
        
        Repository:
        https://github.com/mradaideh/neorl
        
        Main News Article:
        https://news.mit.edu/2020/want-cheaper-nuclear-energy-turn-design-process-game-1217
        
        Documentation:
        https://neorl.readthedocs.io/en/latest/index.html
        
        ## Quick Example
        
        Here is a quick example of how to use NEORL to minimize a 5-D sphere function:
        ```python
        #---------------------------------
        # Import packages
        #---------------------------------
        import numpy as np
        import matplotlib.pyplot as plt
        from neorl import DE, XNES
        
        #---------------------------------
        # Fitness
        #---------------------------------
        #Define the fitness function
        def FIT(individual):
            '''Sphere test objective function.
                    F(x) = sum_{i=1}^d xi^2
                    d=1,2,3,...
                    Range: [-100,100]
                    Minima: 0
            '''
        
            return sum(x**2 for x in individual)
        
        #---------------------------------
        # Parameter Space
        #---------------------------------
        #Setup the parameter space (d=5)
        nx=5
        BOUNDS={}
        for i in range(1,nx+1):
            BOUNDS['x'+str(i)]=['float', -100, 100]
        
        #---------------------------------
        # DE
        #---------------------------------
        de=DE(mode='min', bounds=BOUNDS, fit=FIT, npop=50, CR=0.5, F=0.7, ncores=1, seed=1)
        x_best, y_best, de_hist=de.evolute(ngen=120, verbose=0)
        print('---DE Results---', )
        print('x:', x_best)
        print('y:', y_best)
        
        #---------------------------------
        # NES
        #---------------------------------
        x0=[-50]*len(BOUNDS)
        amat = np.eye(nx)
        xnes=XNES(mode='min', bounds=BOUNDS, fit=FIT, npop=50, eta_mu=0.9,
                  eta_sigma=0.5, adapt_sampling=True, seed=1)
        x_best, y_best, nes_hist=xnes.evolute(120, x0=x0, verbose=0)
        print('---XNES Results---', )
        print('x:', x_best)
        print('y:', y_best)
        
        
        #---------------------------------
        # Plot
        #---------------------------------
        #Plot fitness for both methods
        plt.figure()
        plt.plot(np.array(de_hist), label='DE')
        plt.plot(np.array(nes_hist['fitness']), label='NES')
        plt.xlabel('Generation')
        plt.ylabel('Fitness')
        plt.legend()
        plt.show()
        ```
        
        ## Citing the Project
        
        To cite this repository in publications:
        
        ```
        @misc{neorl,
          author = {Radaideh, Majdi I. and Du, Katelin and Seurin, Paul and Seyler, Devin and Gu, Xubo and Wang, Haijia and Shirvan, Koroush},
          title = {NEORL},
          year = {2021},
          publisher = {GitHub},
          journal = {GitHub repository},
          howpublished = {\url{https://github.com/mradaideh/neorl}},
        }
        ```
        
        
        
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Description-Content-Type: text/markdown
Provides-Extra: tests
Provides-Extra: docs
